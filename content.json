{"meta":{"title":null,"subtitle":null,"description":null,"author":"hero","url":"https://yoursite.com"},"pages":[{"title":"关于我","date":"2018-08-16T12:59:47.000Z","updated":"2019-02-19T15:12:17.868Z","comments":true,"path":"about/index.html","permalink":"https://yoursite.com/about/index.html","excerpt":"","text":"Hello, I am hero."}],"posts":[{"title":"BFC(块级格式化上下文)","slug":"BFC(块级格式化上下文)","date":"2018-01-13T16:00:00.000Z","updated":"2019-02-20T07:21:49.907Z","comments":true,"path":"2018/01/14/BFC(块级格式化上下文)/","link":"","permalink":"https://yoursite.com/2018/01/14/BFC(块级格式化上下文)/","excerpt":"","text":"BFC(块级格式化上下文)BFC就是将元素按照从上到下的顺序去排列。 什么情况下可以让元素产生BFC给这些元素添加如下属性就可以触发BFC。-float属性不为none 浮动-position为absolute或fixed 脱离文档流-overflow不为visible。-display为inline-block, table-cell, table-caption, flex, inline-flex看到有人把display：table也认为可以生成BFC，其实这里的主要原因在于Table会默认生成一个匿名的table-cell，正是这个匿名的table-cell生成了BFC。 BFC元素所具有的特性BFC布局规则特性：1.在BFC中，盒子从顶端开始垂直地一个接一个地排列.2.盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠3.在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）。4.BFC的区域不会与浮动盒子产生交集，而是紧贴浮动边缘。5.计算BFC的高度时，自然也会检测浮动的盒子高度。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。 BFC的主要用途(1) 清除元素内部浮动只要把父元素设为BFC就可以清理子元素的浮动了，最常见的用法就是在父元素上设置overflow: hidden样式，对于IE6加上zoom:1就可以了。主要用到：计算BFC的高度时，自然也会检测浮动的盒子高度。(2) 解决外边距合并问题外边距合并的问题。主要用到：盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠。属于同一个BFC的两个相邻盒子的margin会发生重叠，那么我们创建不属于同一个BFC，就不会发生margin重叠了。(3) 制作右侧自适应的盒子问题主要用到：BFC的区域不会与浮动盒子产生交集，而是紧贴浮动边缘。普通流元素触发BFC后，为了和浮动元素不产生任何交集，顺着浮动边缘形成自己的封闭上下文绿色盒子浮动，给文字盒子加overflow：hidden；创建BFC;右侧文字会根据绿色盒子大小的改变而自适应大小。 BFC 总结BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。包括浮动，和外边距合并等等，因此，有了这个特性，我们布局的时候就不会出现意外情况了。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/tags/CSS/"}]},{"title":"clear属性 清除浮动","slug":"clear属性 清除浮动","date":"2018-01-13T16:00:00.000Z","updated":"2018-09-12T15:47:14.952Z","comments":true,"path":"2018/01/14/clear属性 清除浮动/","link":"","permalink":"https://yoursite.com/2018/01/14/clear属性 清除浮动/","excerpt":"","text":"clear属性 清除浮动clear清除元素浮动clear属性的值 left 清除元素向左的浮动 right 清除元素向右的浮动 both 左右的浮动均去除 inherit 清除父级继承来的浮动 清除浮动的方式 可以在要清除浮动的元素中使用clear:both来清除浮动对页面的影响，但是父元素如果没有高度就不会被撑开。 可以在父元素中再建一个子元素，清除这个子元素的浮动，即使父元素没有高度也会被撑开。但是：一般情况是不会使用这俩种方法来清除浮动的，因为这俩种方法会增加页面的标签。 使用overflow属性来清除浮动：先找到浮动盒子的父元素，给他添加overflow:hidden，就清除了这个父元素中的子元素浮动对页面的影响，而且父元素也会被撑开。一般情况下也不要使用这种方式，因为overflow:hidden会隐藏超出这个元素所占区域的内容。 使用伪元素,在父元素里面的最后边，添加一个高和行高都为0的空块级元素，清除子元素的浮动。 1234567891011121314.clearfix:after&#123; content:\"\"; height: 0; line-height: 0; display: block; clear: both; visibility: hidden; &#125;.clearfix&#123; * zoom: 1; // 兼容ie6 7&#125; &lt;div class=\"father clearfix\"&gt; &lt;div class=\"son\"&gt;&lt;/div&gt;&lt;/div&gt; 或者使用双伪元素来清除浮动,HTML不变，如上，CSS样式改成以下： 1234567891011.clearfix::before,.clearfix::after&#123; content: ''; display: block; line-height: 0; height: 0; visibility: hidden; clear: both;&#125;.clearfix&#123; *zoom:1; /* 兼容ie6 7 */&#125;","categories":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/tags/CSS/"}]},{"title":"float","slug":"float元素浮动","date":"2018-01-12T16:00:00.000Z","updated":"2018-09-12T15:44:35.915Z","comments":true,"path":"2018/01/13/float元素浮动/","link":"","permalink":"https://yoursite.com/2018/01/13/float元素浮动/","excerpt":"","text":"floatfloat元素浮动元素设置了float，该元素在页面中不再占有位置，但其内容将会覆盖其他元素。Float的值 left 向左浮动 right 向右浮动 inherit 从父级继承浮动属性 none 不浮动1.浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是靠着它最近的父级元素对齐。但是不会超出父元素内边距的范围。2.浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。3.一个父盒子里面的子盒子，其中一个子盒子有浮动的，则其他子盒子都需要浮动。这样才能一行对齐显示。不能一个加浮动，一个不加。这样会有bug。4.浮动脱离标准流，但不占位置。他不会影响前面的元素，却会影响后面的元素标准流。浮动只有左右浮动。5.元素添加了浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少。6.浮动会根据HTML元素书写的位置显示相应的浮动。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/tags/CSS/"}]},{"title":"z-index","slug":"z-index","date":"2018-01-11T16:00:00.000Z","updated":"2018-09-12T15:29:47.919Z","comments":true,"path":"2018/01/12/z-index/","link":"","permalink":"https://yoursite.com/2018/01/12/z-index/","excerpt":"","text":"z-indexz-index 设置元素的堆叠顺序z-index: 2; 设置元素的堆叠顺序，数值越大就越靠前，越不被覆盖。z-index 和position:static，不能同时使用，否则z-index会失效。在CSS中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用z-index层叠等级属性，其取值可为正整数、负整数和0。比如： z-index: 2;注意：1.z-index的默认属性值是0，取值越大，定位元素在层叠元素中越居上。2.如果取值相同，则根据书写顺序，后来居上。3.后面数字一定不能加单位。4.只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/tags/CSS/"}]},{"title":"CSS定位","slug":"CSS定位 position","date":"2018-01-10T16:00:00.000Z","updated":"2018-09-12T15:25:14.405Z","comments":true,"path":"2018/01/11/CSS定位 position/","link":"","permalink":"https://yoursite.com/2018/01/11/CSS定位 position/","excerpt":"","text":"CSS定位position 实现CSS定位Position 把元素放在一个静态的、相对的、绝对的、或者固定的位置中 position:static静态定位；标准流中所有元素都是静态定位。设置position:static的元素， 会同设置position: relative的显示效果一样；但是元素不能设置上下左右的偏移量。静态定位是所有元素的默认定位方式，当position属性的取值为static时，可以将元素定位于静态位置。 所谓静态位置就是各个元素在HTML文档流中默认的位置。上面的话翻译成白话： 就是网页中所有元素都默认的是静态定位哦！ 其实就是标准流的特性。在静态定位状态下，无法通过边偏移属性（top、bottom、left或right）来改变元素的位置。PS： 静态定位其实没啥可说的。 position: relative相对的；在position: relative下，我们可以设置元素上下左右的偏移量。设置了偏移量，那么元素会以原来的位置发生偏移。Position：relative：特点：1.相对于原来的位置发生偏移。2.设置了相对定位的元素在页面仍占据位置。 相对定位是将元素相对于它在标准流中的位置进行定位，当position属性的取值为relative时，可以将元素定位于相对位置。对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留，而且移动的位置是相对于自身原来的位置来说的。 position:absolute绝对的；设置了position:absolute的元素，在页面中不再占有位置，但同样会显示其内容；也可以元素上下左右的偏移量。1.绝对定位元素没有父元素，那么偏移量就相对于浏览器可视区（不是相对于body ) 来定位的。2.绝对定位元素有父元素，但父元素没有定位，那么偏移量仍然相对于浏览器可视区（不是相对于body ) 来定位的。3.如果绝对定位元素有父元素，而且父元素有定位（非position:static），那么这个绝对定位的元素以父元素为基础进行偏移。4.如果只是给盒子指定了绝对定位，但是没有给偏移量，则该盒子以标准流来显示排序，和上一个盒子的底边对齐，会显示其内容，但是不占有位置。（会覆盖了后面的盒子）总结：将来写页面用的最多的是绝对定位与相对定位一起用。（子绝父相：子元素使用绝对定位，父元素使用相对定位） position:fixed固定定位；设置position:fixed的元素，将会固定在页面，不会随页面滚动而滚动。也可以元素上下左右的偏移量。1.不管页面多大，偏移量永远是相对浏览器的边框来设置的。2.固定定位的元素也脱离了标准流，不会在页面占据位置。 定位总结static 不脱标，正常模式，不可以使用边偏移，正常模式。relative 不脱标，占有位置，可以使用边偏移，相对自身位置移动。absolute 完全脱标，不占有位置，可以使用边偏移，相对于定位父级移动位置。fixed 完全脱标，不占有位置，可以使用边偏移，相对于浏览器移动位置。 定位模式转换跟 浮动一样， 元素添加了绝对定位或者固定定位之后（静态、相对定位不可以，因为他俩没脱标），元素模式也会发生转换， 都转换为行内块模式，因此 比如 行内元素 如果添加了 绝对定位或者 固定定位后，可以不用转换模式，直接给高度和宽度就可以了。 要通栏就加width100%。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/tags/CSS/"}]},{"title":"去除图片底侧空白缝隙","slug":"去除图片底侧空白缝隙","date":"2018-01-09T16:00:00.000Z","updated":"2018-09-12T15:13:08.884Z","comments":true,"path":"2018/01/10/去除图片底侧空白缝隙/","link":"","permalink":"https://yoursite.com/2018/01/10/去除图片底侧空白缝隙/","excerpt":"","text":"去除图片底侧空白缝隙去除图片底侧空白缝隙有个很重要特性要记住： 如果一个元素没有基线，比如图片或者表单等行内块元素，则他的底线会和父级盒子的基线对齐。 这样会造成一个问题，就是图片底侧会有一个空白缝隙。解决的方法就是： 给img vertical-align:middle | top等等。 让图片不要和基线对齐。 给img 添加 display：block; 转换为块级元素就不会存在问题了。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/tags/CSS/"}]},{"title":"设置元素垂直对齐方式","slug":"设置元素垂直对齐方式","date":"2018-01-08T16:00:00.000Z","updated":"2018-09-12T15:10:09.433Z","comments":true,"path":"2018/01/09/设置元素垂直对齐方式/","link":"","permalink":"https://yoursite.com/2018/01/09/设置元素垂直对齐方式/","excerpt":"","text":"设置元素垂直对齐方式Vertical-align 设置元素垂直对齐方式设置元素的垂直对齐方式。vertical-align 不能设置块级元素中的内容对齐，它只针对于行内元素或者行内块元素，特别是行内块元素，。通常用它来控制图片和表单等。Vertical-align：设置文本与图片的对齐方式 取值 middle 中线对齐 Baseline 默认值，基线对齐 Top 顶端对齐 。。。。文本与图片在同一行，那么文字与图片的默认对齐方式是文字的基线对齐图片的底线对齐。 不止图片，其他行内元素或者行内块元素，设置vertical-align也是可以的。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/tags/CSS/"}]},{"title":"box-sizing 元素宽高的计算方法","slug":"box-sizing","date":"2018-01-07T16:00:00.000Z","updated":"2018-09-12T15:01:40.158Z","comments":true,"path":"2018/01/08/box-sizing/","link":"","permalink":"https://yoursite.com/2018/01/08/box-sizing/","excerpt":"","text":"元素宽度和高度的计算方法box-sizing 元素宽高的计算方法box-sizing 有三个值content-box 默认值。宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框。border-box 为元素设定的宽度和高度决定了元素的边框盒。就是说，为元素指定的任何内边距和边框都将在已设定宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。inherit 规定应从父元素继承 box-sizing 属性的值。意思是：在box-sizing: border-box;下，width和height规定了整个元素的大小，包括border和padding的大小也已经计算在内了。会对元素内容进行压缩。box-sizing:content-box;下，width和height只能规定了元素内容的大小，border和padding的大小并没有计算在内。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/tags/CSS/"}]},{"title":"文字溢出","slug":"文字溢出","date":"2018-01-06T16:00:00.000Z","updated":"2019-02-19T13:59:01.260Z","comments":true,"path":"2018/01/07/文字溢出/","link":"","permalink":"https://yoursite.com/2018/01/07/文字溢出/","excerpt":"","text":"文字溢出text-overflow 处理文字溢出设置当文本溢出元素范围时是否使用一个省略标记（…）表示溢出的内文本内容。text-overflow : clip | ellipsisclip : 不显示省略标记（…），而是简单的裁切。ellipsis : 当对象内文本溢出时显示省略标记（…）。Text-overflow的使用：1234567div&#123; width: 50px; border:solid 1px red; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; &#125; white-space 、overflow、text-overflow 这三个属性一个都不能少，必须配合使用，才能出效果。这种方法文字只能显示一行，如果想显示两行或显示多行后超出的内容才显示省略标记，这种方法是无法实现的。可以用下面的方法… 实战中的文字溢出元素显示2行文本（行数根据需求自定义），超出的文字内容删除，以省略标记（…）表示删除的内容。12345678910div&#123; width: 300px; height: 30px; line-height: 15px; word-break: break-all; /*设置文字的换行方式*/ overflow: hidden; display: -webkit-box; -webkit-line-clamp: 2; /*设置文字显示的行数是两行*/ -webkit-box-orient: vertical;&#125; 这样就能实现显示2行或者显示多行后，超出的文字删除，以省略标记（…）表示删除的内容。 代码中：overflow: hidden; display: -webkit-box; -webkit-line-clamp: 2;-webkit-box-orient: vertical;这四个样式属性是一个固定组合，一个都不能少，元素必须同时拥有这些样式属性，才能实现效果。这四个样式属性已经可以处理文字溢出了，其他属性看情况设置即可。代码中还要注意：height: 30px; line-height: 15px; -webkit-line-clamp: 2;三者之间的关系。 高度 = 行高 * 行数word-break: break-all; 只是元素的换行方式，根据需求设置即可。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/tags/CSS/"}]},{"title":"添加盒子阴影","slug":"添加盒子阴影","date":"2018-01-05T16:00:00.000Z","updated":"2018-09-12T14:54:28.881Z","comments":true,"path":"2018/01/06/添加盒子阴影/","link":"","permalink":"https://yoursite.com/2018/01/06/添加盒子阴影/","excerpt":"","text":"添加盒子阴影box-shadow 添加盒子阴影取值none： 无阴影 ①： 第1个长度值用来设置对象的阴影水平偏移值。可以为负值②： 第2个长度值用来设置对象的阴影垂直偏移值。可以为负值③： 如果提供了第3个长度值则用来设置对象的阴影模糊值。不允许负值④： 如果提供了第4个长度值则用来设置对象的阴影外延值（放大）。可以为负值 。⑤：color： 设置对象的阴影的颜色。颜色值可以最先设置。⑥：inset： 设置对象的阴影类型为内阴影。该值为空时，则对象的阴影类型为外阴影。设置的位置：只能在开头或者末尾。 X Y方向的值必须要设置， 模糊值 放大值 可以根据需求设置，color也要默认的值，也可以根据需求设置。 如：box-shadow: red 100px 100px 0px ; 分别代表：颜色值 左边距离 与上方距离 清晰度可以设定多组效果，每组参数值以逗号分隔。多组阴影特殊效果。同一元素盒子可以添加多个阴影。box-shadow:gold 10px 10px 1px , blue 15px 15px 1px, black 20px 20px 1px;","categories":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/tags/CSS/"}]},{"title":"添加文本阴影","slug":"添加文本阴影","date":"2018-01-04T16:00:00.000Z","updated":"2018-09-12T14:53:03.953Z","comments":true,"path":"2018/01/05/添加文本阴影/","link":"","permalink":"https://yoursite.com/2018/01/05/添加文本阴影/","excerpt":"","text":"添加文本阴影text-shadow 添加文本阴影取值none： 无阴影 ①： 第1个长度值用来设置对象的阴影水平偏移值。可以为负值②： 第2个长度值用来设置对象的阴影垂直偏移值。可以为负值③： 如果提供了第3个长度值则用来设置对象的阴影模糊值。不允许负值④：color： 设置对象的阴影的颜色。颜色值可以最先设置。如：text-shadow: red 100px 100px 0px ; 分别代表：颜色值 左边距离 与上方距离 清晰度可以设定多组效果，每组参数值以逗号分隔。多组阴影特殊效果。同一文本添加多个阴影，如：text-shadow:gold 10px 10px 1px , blue 15px 15px 1px, black 20px 20px 1px;","categories":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/tags/CSS/"}]},{"title":"CSS渐变","slug":"CSS渐变","date":"2018-01-03T16:00:00.000Z","updated":"2018-09-12T14:52:51.098Z","comments":true,"path":"2018/01/04/CSS渐变/","link":"","permalink":"https://yoursite.com/2018/01/04/CSS渐变/","excerpt":"","text":"CSS渐变background:linear-gradient() 线性渐变background:linear-gradient()也可以写成background-image:linear-gradient()参数：background:linear-gradient( 方向， 渐变开始的颜色， 渐变结束的颜色（也是下一个颜色的开始颜色） 渐变结束的颜色的位置， 渐变结束的颜色 结束颜色的位置…..)参数说明：方向：可以使用角度值或者关键字来设置。角度值就是1deg 5deg 60deg…..关键字是：to left： 设置渐变为从右到左。相当于: 270degto right： 设置渐变从左到右。相当于: 90degto top： 设置渐变从下到上。相当于: 0degto bottom：设置渐变从上到下。相当于: 180deg。这是默认值，等同于留空不写。to right bottom:设置渐变从左上到右下。to left bottom：设置渐变从右上到左下。等等。。。。渐变开始的颜色：从什么颜色开始渐变。渐变结束的颜色（也是下一个颜色的开始颜色）：以什么颜色结束，与后面 渐变结束的颜色的位置 用空格隔开。这个渐变结束的颜色也是下一个渐变结束颜色的开始颜色。渐变结束的颜色的位置：就是渐变结束的颜色的位置，如：结束的颜色的位置是50%或者是200px,意思是在50%或者200px这位置的颜色是渐变结束的颜色。这个位置可以用px 或者是百分比表示。百分比是相对要设置渐变的盒子的大小来讲的。 background:radial-gradient() 径向渐变background:radial-gradient( 500px at center , red 50px, blue 100px,black 150px );参数：background:radial-gradient( 渐变的范围（圆心的直径） at 圆心的位置，渐变的开始颜色 渐变开始颜色的范围（到圆心的半径） ， 渐变结束的颜色（也是下一个颜色的开始颜色） 渐变结束的颜色的位置， 渐变结束的颜色 渐变结束的颜色的位置….);参数说明：渐变的范围（圆的直径）：在该范围完成颜色渐变，这个值是圆的直径。该值只接受以px为单位的数值。如该值是100px,意思是在直径为100px的圆内，完成所有的渐变。 圆心的位置：确定圆心的位置。如果提供2个参数，第一个表示横坐标，第二个表示纵坐标；如果只提供一个，第二值默认为50%，即center。该值除了接受top、bottom left…等关键字以外，还接受以px、%为单位的数值。 渐变的开始颜色：以什么颜色开始渐变。和后面的开始渐变颜色的范围（到圆心的半径）用空格隔开 渐变开始颜色的范围（到圆心的半径）：以圆心为中心，这个数值为半径，得出的圆就是渐变开始颜色的范围。该值接受以px、%为单位的数值。百分比是相对整个渐变范围来讲的，就是相对渐变的范围（圆的直径）来讲的。这个参数根据需求，可写可不写。 渐变结束的颜色（也是下一个颜色的开始颜色）：以什么颜色结束，与后面 渐变结束的颜色的位置 用空格隔开。这个渐变结束的颜色也是下一个渐变结束颜色的开始颜色。 渐变结束的颜色的位置：就是渐变结束的颜色的位置，如：结束的颜色的位置是50%或者是200px,意思是在50%或者200px这位置的颜色是渐变结束的颜色。这个位置可以用px 或者是百分比表示。百分比是相对整个渐变范围来讲的，就是相对渐变的范围（圆的直径）来讲的。这个参数根据需求，可写可不写。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/tags/CSS/"}]},{"title":"CSS背景","slug":"CSS背景","date":"2018-01-02T16:00:00.000Z","updated":"2018-09-12T14:19:48.094Z","comments":true,"path":"2018/01/03/CSS背景/","link":"","permalink":"https://yoursite.com/2018/01/03/CSS背景/","excerpt":"","text":"CSS背景background-color 背景颜色1234&lt;p&gt;我是p标签&lt;/p&gt;p&#123; background-color: red;&#125; background-image 背景图片123body&#123; background-image: url('./demo.png'); /* url('') 引出图片 */&#125; background-repeat 背景图重复设置背景图片是否重复显示，和重复显示的方式。取值：repeat： 背景图像在横向和纵向平铺 。默认值。repeat-x： 背景图像在横向上平铺repeat-y： 背景图像在纵向上平铺no-repeat： 背景图像不平铺round： 当背景图像没有足够的空间进行repeat时，背景图像会缩放到适应且填充满整个容器（CSS3）。space： 背景图像以相同的间距平铺且填充满整个容器或某个方向。（CSS3）说明：设置或检索对象的背景图像如何铺排填充。必须先指定 &lt;’ background-image ‘&gt; 属性。允许提供2个参数，如果提供2个参数，第1个用于横向，第二个用于纵向。如果只提供1个参数，则用于横向和纵向。特殊值repeat-x和repeat-y除外，因为repeat-x相当于repeat no-repeat，repeat-y相当于no-repeat repeat，即其实repeat-x和repeat-y等价于提供了2个参数值。 background-position 背景图起始位置设置背景图片的起始位置。123&#123; background-position: 100% 5px &#125; 取值： ： 用百分比指定背景图像填充的位置。可以为负值。其参考的尺寸为容器大小减去背景图片大小。 ： 用长度值指定背景图像填充的位置。可以为负值。center： 背景图像横向和纵向居中。left： 背景图像在横向上填充从左边开始。right： 背景图像在横向上填充从右边开始。top： 背景图像在纵向上填充从顶部开始。bottom： 背景图像在纵向上填充从底部开始。说明：设置或检索对象的背景图像位置。必须先指定 &lt;’ background-image ‘&gt; 属性。该属性提供2个参数值（CSS3中已允许提供3，4个值）。如果提供两个值，第一个用于横坐标，第二个用于纵坐标。如果只提供一个值，该值将用于横坐标；纵坐标将默认为50%（即center）。如果提供三或四个值，每个或偏移前都必须跟着一个边界关键字（即left | right | top | bottom，不包括center），偏移量相对关键字位置进行偏移。 如下面的示例：示例：假设要定义背景图像在容器中右下方，并且距离右边和底部各有20px 缩写方式： 1background:url(test1.jpg) no-repeat right 20px bottom 20px; 你也可以设置3个参数值： 拆分方式：距离左边和底部各有10px 1background:url(test1.jpg) no-repeat left bottom 10px; 要注意的是：设置3个或4个值，偏移量前必须有关键字。也就是说，形如：”10px bottom 20px” ，这样的参数设置是错误的，因为10px前面没有关键字。 background-attachment 背景图是否滚动说明：设置或检索背景图像是随对象内容滚动还是固定的。必须先指定 &lt;’ background-image ‘&gt; 属性。取值：scroll： 背景图像相对于元素固定，也就是说当元素内容滚动时背景图像不会跟着滚动，因为背景图像总是要跟着元素本身。但会随元素的祖先元素或窗体一起滚动。 默认值。fixed： 背景图像相对于窗体固定。local： 背景图像相对于元素内容固定，也就是说当元素随元素滚动时背景图像也会跟着滚动，因为背景图像总是要跟着内容。（CSS3） background-size 背景图尺寸background-size:100% 500px 设置背景图片的尺寸大小取值：用长度值、百分比指定背景图像大小。不允许负值。auto： 背景图像的真实大小。cover： 将背景图像等比缩放到完全覆盖容器，背景图像有可能超出容器。容器的宽和高中哪个尺寸大，就缩放到它的尺寸。如果宽和高的不相等，背景图像就会超出容器。contain： 将背景图像的宽或高等比缩放到与容器的宽度或高度相等，容器的宽和高中哪个尺寸小，就缩放到它的尺寸。剩余的背景空间使用background-repeat填满背景空间。背景图像始终被包含在容器内，但重复的背景图片有一部分会超出容器。注意：该属性提供2个参数值 (特性值 auto cover和contain除外)。如果提供两个，第一个用于定义背景图像的宽度，第二个用于定义背景图像的高度。如果只提供一个，该值将用于定义背景图像的宽度，第2个值默认为auto，即高度为auto，此时背景图以提供的宽度作为参照来进行等比缩放。 对应的脚本特性为backgroundSize。 Background 连写方式background：color url( ) no-repeat fixed center center / size ;连写的时候需要注意顺序，还有如果background-position和background-size同时需要设置的话，background-position和background-size之间要用斜杠进行分隔。如果你要设置background-size就必须先要设置background-position，因为连写的顺序是position再到size的。如果你要设置position，那么size设不设置无所谓，看需求。 background-origin定义：background-origin 属性规定了background-position 属性在哪里开始计算定位。 注释：如果背景图像的 background-attachment 属性为 “fixed”，则该属性没有效果。值 描述padding-box 默认值。背景图像相对于内边距框来定位。（Padding开始计算）border-box 背景图像相对于边框盒来定位。（border开始计算）content-box 背景图像相对于内容框来定位。（content开始计算） background-clip 规定了背景的绘制区域。值 描述border-box 默认值。裁剪边框以外的背景内容。背景区域是边框及边框以内的内容padding-box 被裁内边距以外的背景内容。背景区域是内边距及内边距以内的内容content-box 被裁内容以外的背景内容。背景区域只有内容区域 背景半透明1.强烈推荐：盒子背景半透明 background: rgba(r , g , b, alpha);r,g,b 是红绿蓝的颜色， alpha 是透明度的意思，取值范围是 0~1 之间。 这个是让盒子的背景半透明，盒子里面内容不半透明。2.opacity：; 元素半透明此属性是盒子半透明，不是背景半透明哦，因为他里面的内容也一起半透明了。opacity取值范围是 0~1 之间 表示透明度 0% 到 100%，一般会取值 opacity:0.5;ie8及其以下的版本 不支持opacity，要用filter:Alpha(opacity=50) 来代表opacity:0.5; 他们效果是一样的，只是低版本兼容性问题造成的而已。filter:Alpha(opacity=50) 的取值是 0 到 100因此，低版本的 ie浏览器，我们不需要透明了，直接采用优雅降级的做法。background: gray; （先写）background: rgba(0,0,0,.2); （后写）以上两句 背景， 低版本ie只执行gray， 其他浏览器执行 半透明下面这一句。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/tags/CSS/"}]},{"title":"CSS三大特性","slug":"css三大特性","date":"2018-01-02T16:00:00.000Z","updated":"2018-08-16T14:56:43.163Z","comments":true,"path":"2018/01/03/css三大特性/","link":"","permalink":"https://yoursite.com/2018/01/03/css三大特性/","excerpt":"","text":"CSS三大特性继承性继承性：子元素可以继承父元素的样式。但是有些标签不能继承，如：a标签的颜色不能继承，如果要修改 a标签的颜色，就要直接修改a标签。h标签的大小不能继承，如果要修改 h标签的大小，就要直接修改h标签。 层叠性层叠性：是浏览器处理冲突的一个特性。作用：如果一个属性通过两个选择器设置到同一个元素上面，那这个时候一个属性将会另一个属性层叠掉。如果多个属性通过两个选择器设置到一个元素上，那就不会发生层叠。 优先级优先级：是指 优先显示 优先级高的CSS样式。 !Important &gt; 行内样式 &gt; id选择器 &gt; 类选择器 &gt; 标签选择器 &gt; 通配符 &gt; 继承 注意:虽然!important是一个变数，但是不能作用在继承上。就是！Important属性不能继承。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/categories/CSS/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"https://yoursite.com/tags/CSS/"}]}]}